openapi: 3.0.0
info:
  title: E-commerce API
  version: 1.0.0
  description: Express API for an e-commerce platform where users can browse
    products, add them to a cart, and make purchases. Admin users can
    manage product listings, view orders, and update order statuses.

    Features -

    User registration & login (JWT authentication)

    Product CRUD operations

    Shopping cart creation, update & retrieval

    Secure routes for authenticated users

    Image uploads for products



    **Note**

    Always clear the value used as placeholder(e.g string) and uncheck the "send empty value" option when performing
    a PUT(update) method to avoid sending string or an empty value except you want to
    intentionally update a property to either



    **Coming Up......**

    Integration with payment system for checkout

paths:
  /createUser:
    post:
      summary: Create a new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                      - fail
                    default: success
                  message:
                    type: string
                  result:
                    $ref: "#/components/schemas/User"

        "400":
          description: Validation failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"

        "409":
          description: Email already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictError"

        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /login:
    post:
      summary: Login a user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: Login successful
          headers:
            Authorization:
              description: JWT token for authenticated user
              schema:
                type: string
                example: "Bearer<JWT_TOKEN>"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                      - fail
                    default: success
                  message:
                    type: string
                  result:
                    $ref: "#/components/schemas/User"

        "400":
          description: Validation failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"

        "401":
          description: Unauthorized - Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictError"

        "404":
          description: Not found - User does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictError"

        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /getUsers:
    get:
      summary: Get all users
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of all users
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                      - fail
                    default: success
                  message:
                    type: string
                  result:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
        "403":
          description: Forbidden - User is not an admin
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /getUser:
    get:
      summary: Get user by ID
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User detail
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                      - fail
                    default: success
                  message:
                    type: string
                  result:
                    $ref: "#/components/schemas/User"
        "403":
          description: Invalid token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /updateUser:
    patch:
      summary: Update user
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        "200":
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                      - fail
                    default: success
                  message:
                    type: string
                  result:
                    $ref: "#/components/schemas/User"
        "403":
          description: Forbidden - invalid token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /changePassword:
    put:
      summary: Change user password
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                currentPassword:
                  type: string
                newPassword:
                  type: string
      responses:
        "200":
          description: Password changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                      - fail
                    default: success
                  message:
                    type: string
        "403":
          description: invalid token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /createCategory:
    post:
      summary: Create a new category
      tags:
        - Categories
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                description:
                  type: string
      responses:
        "201":
          description: Category created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                      - fail
                    default: success
                  message:
                    type: string
                  result:
                    $ref: "#/components/schemas/Category"

        "400":
          description: Validation failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"

        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /updateCategory/{id}:
    put:
      summary: Update category by ID
      tags:
        - Categories
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the category to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
      responses:
        "200":
          description: Category updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                      - fail
                    default: success
                  message:
                    type: string
                  result:
                    $ref: "#/components/schemas/Category"
        "403":
          description: Forbidden - User is not an admin or invalid token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Category not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /getCategories:
    get:
      summary: Get all categories
      tags:
        - Categories
      responses:
        "200":
          description: List of all categories
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                      - fail
                    default: success
                  message:
                    type: string
                  result:
                    type: array
                    items:
                      $ref: "#/components/schemas/Category"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /getCategoryByID/{id}:
    get:
      summary: Get category by ID
      tags:
        - Categories
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the category to retrieve
      responses:
        "200":
          description: Category found successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                      - fail
                    default: success
                  message:
                    type: string
                  result:
                    $ref: "#/components/schemas/Category"
        "404":
          description: Category not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /deleteCategoryByID/{id}:
    delete:
      summary: Delete category by ID
      tags:
        - Categories
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the category to delete
      responses:
        "200":
          description: Category deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                      - fail
                    default: success
                  message:
                    type: string
        "403":
          description: Forbidden - User is not an admin or invalid token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Category not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /createProduct:
    post:
      summary: Create a new product
      tags:
        - Products
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: imageCount
          required: true
          schema:
            type: integer
          description: Number of images to upload for the product
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - name
                - price
                - stock
                - category
                - productImages
              properties:
                name:
                  type: string
                description:
                  type: string
                price:
                  type: number
                  format: float
                stock:
                  type: integer
                category:
                  type: string
                  description: Value must be a 24-character hexadecimal string(MongoDB ID)
                  example: "60c72b2f9b1e8b001c8e4d3a"
                productImages:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        "201":
          description: Product created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                      - fail
                    default: success
                  message:
                    type: string
                  result:
                    $ref: "#/components/schemas/Product"

        "400":
          description: Validation failed or missing fields
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"

        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /getAllProducts:
    get:
      summary: Get all products
      tags:
        - Products
      responses:
        "200":
          description: List of all products
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                      - fail
                    default: success
                  message:
                    type: string
                  result:
                    type: array
                    items:
                      $ref: "#/components/schemas/Product"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /getProductByID/{id}:
    get:
      summary: Get product by ID
      tags:
        - Products
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the product to retrieve
      responses:
        "200":
          description: Product found successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                      - fail
                    default: success
                  message:
                    type: string
                  result:
                    $ref: "#/components/schemas/Product"
        "404":
          description: Product not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /updateProduct/{id}:
    put:
      summary: Update a  product
      tags:
        - Products
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: imageCount
          schema:
            type: integer
          description: Number of images to upload for the product
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the product to be updated
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                price:
                  type: number
                  format: float
                stock:
                  type: integer
                category:
                  type: string
                  description: Value must be a 24-character hexadecimal string(MongoDB ID)
                  example: "60c72b2f9b1e8b001c8e4d3a"
                productImages:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        "200":
          description: Product updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                      - fail
                    default: success
                  message:
                    type: string
                  result:
                    $ref: "#/components/schemas/Product"

        "400":
          description: Validation failed or missing fields
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"

        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /deleteProductByID/{id}:
    delete:
      summary: Delete product by ID
      tags:
        - Products
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the product to delete
      responses:
        "200":
          description: Product deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                      - fail
                    default: success
                  message:
                    type: string
        "403":
          description: Forbidden - User is not an admin or invalid token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Product not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /addToCart:
    post:
      summary: Create a cart
      tags:
        - Cart
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                cartItems:
                  type: array
                  items:
                    type: object
                    properties:
                      productId:
                        type: string
                        description: Value must be a 24-character hexadecimal string(MongoDB ID)
                        example: "60c72b2f9b1e8b001c8e4d3a"
                      quantity:
                        type: number
              required:
                - productId
                - quantity
      responses:
        "201":
          description: Cart created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                      - fail
                    default: success
                  message:
                    type: string
                  result:
                    $ref: "#/components/schemas/Cart"

        "404":
          description: Product not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"

        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /getCart:
    get:
      summary: Get user cart
      tags:
        - Cart
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Get cart items
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                      - fail
                    default: success
                  message:
                    type: string
                  result:
                    type: array
                    items:
                      $ref: "#/components/schemas/Cart"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /addItemToExistingCart/{cartId}:
    put:
      summary: update cart
      tags:
        - Cart
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            type: string
          description: The ID of the cart
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                cartItems:
                  type: array
                  items:
                    type: object
                    properties:
                      quantity:
                        type: number
              required:
                - quantity
      responses:
        "201":
          description: Cart updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                      - fail
                    default: success
                  message:
                    type: string
                  result:
                    $ref: "#/components/schemas/Cart"

        "404":
          description: Product not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"

        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /removeFromCart/{cartId}/{productId}:
    delete:
      summary: Delete cart by ID
      tags:
        - Cart
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            type: string
          description: The ID of the cart
        - in: path
          name: productId
          required: true
          schema:
            type: string
          description: The ID of the product
      responses:
        "200":
          description: Cart deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                      - fail
                    default: success
                  message:
                    type: string
        "404":
          description: Product not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /clearCart/{cartId}:
    delete:
      summary: Clear all items from cart by ID
      tags:
        - Cart
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            type: string
          description: The ID of the cart
      responses:
        "200":
          description: Cart cleared successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                      - fail
                    default: success
                  message:
                    type: string
        "404":
          description: Cart not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        email:
          type: string
        isAdmin:
          type: boolean
          default: false
        createdAt:
          type: string
        updatedAt:
          type: string

    Category:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        description:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string

    Product:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
        stock:
          type: integer
        category:
          type: string
        productImages:
          type: array
          items:
            type: string
            format: uri
        createdAt:
          type: string
        updatedAt:
          type: string

    Cart:
      type: object
      properties:
        cartItems:
          type: array
          items:
            type: object
            properties:
              productId:
                type: string
              quantity:
                type: number
              totalPrice:
                type: number
                format: float
        totalAmount:
          type: number
          format: float
        createdAt:
          type: string
        updatedAt:
          type: string

    ErrorResponse:
      type: object
      properties:
        status:
          type: string
          example: fail
        message:
          type: string
          example: Something went wrong

    ValidationError:
      type: object
      properties:
        status:
          type: string
          example: fail
        message:
          type: string
          example: Invalid input
        errors:
          type: object
          additionalProperties:
            type: string

    UnauthorizedError:
      type: object
      properties:
        status:
          type: string
          example: fail
        message:
          type: string
          example: Invalid or missing token

    ForbiddenError:
      type: object
      properties:
        status:
          type: string
          example: fail
        message:
          type: string
          example: Access denied. Admins only.

    NotFoundError:
      type: object
      properties:
        status:
          type: string
          example: fail
        message:
          type: string
          example: Resource not found

    ConflictError:
      type: object
      properties:
        status:
          type: string
          example: fail
        message:
          type: string
          example: Email already exists
